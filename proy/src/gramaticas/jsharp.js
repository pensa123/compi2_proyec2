/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,13,20,50,52,53,57,58,59,60,87,88],$V1=[2,4],$V2=[1,23],$V3=[1,17],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,15],$Vc=[1,16],$Vd=[2,94],$Ve=[1,28],$Vf=[13,20,57,58,59,60],$Vg=[13,55],$Vh=[2,55],$Vi=[6,13,20,22,36,50,52,53,57,58,59,60,87,88],$Vj=[6,13,19,20,32,33,34,36,40,42,43,44,45,46,47,50,52,53,57,58,59,60,87,88],$Vk=[2,57],$Vl=[1,43],$Vm=[1,59],$Vn=[1,53],$Vo=[1,51],$Vp=[1,52],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[2,11],$Vw=[1,70],$Vx=[1,69],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,88],$VN=[1,90],$VO=[1,91],$VP=[16,22],$VQ=[6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,63,65,70,71,72,73,74,75,76,77,78,79,87,88],$VR=[6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,63,65,66,67,68,70,71,72,73,74,75,76,77,78,79,87,88],$VS=[6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,70,71,72,73,74,75,87,88],$VT=[6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,70,71,72,73,74,75,76,77,78,79,87,88],$VU=[13,19,32,33,34,40,42,43,44,45,46,47,50,52,53,57,58,59,60],$VV=[2,15],$VW=[1,140],$VX=[1,141],$VY=[1,142],$VZ=[1,143],$V_=[1,138],$V$=[1,139],$V01=[1,135],$V11=[1,136],$V21=[1,137],$V31=[1,134],$V41=[1,133],$V51=[1,155],$V61=[13,16,19,32,33,34,40,42,43,44,45,46,47,50,52,53,57,58,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"import":4,"instrucciones_cuerpo":5,"EOF":6,"instruccion_c":7,"declaracion":8,"fin":9,"visibilidad":10,"declararfuncion":11,"tipo":12,"IDENTIFICADOR":13,"APAR":14,"params":15,"CPAR":16,"ALLAVE":17,"instrucciones_fun":18,"CLLAVE":19,"RVOID":20,"params2":21,"COMA":22,"instrucciones_f":23,"si":24,"switch":25,"transferencia":26,"cases":27,"asignacion":28,"ciclos":29,"IGUAL":30,"exp":31,"RWHILE":32,"RDO":33,"RFOR":34,"ifor":35,"PCOMA":36,"mfor":37,"ffor":38,"inc_dec":39,"RCASE":40,"DOSPTS":41,"RDEFAULT":42,"RBREAK":43,"RCONTINUE":44,"RRETURN":45,"RSWITCH":46,"RIF":47,"RELSE":48,"listaID":49,"RVAR":50,"DOSPUNTOSIGUAL":51,"RCONST":52,"RGLOBAL":53,"tp":54,"ACORCH":55,"CCORCH":56,"RINTEGER":57,"RDOUBLE":58,"RCHAR":59,"RBOOLEAN":60,"RIMPORT":61,"listaimport":62,"MENOS":63,"NOT":64,"MAS":65,"POR":66,"DIVIDIDO":67,"MODULO":68,"POTENCIA":69,"XOR":70,"OR":71,"AND":72,"IGUALIGUAL":73,"DIFIGUAL":74,"TRESIGUAL":75,"MAYOR":76,"MENOR":77,"MAYORIGUAL":78,"MENORIGUAL":79,"RFALSE":80,"RTRUE":81,"ENTERO":82,"DECIMAL":83,"CADENA":84,"MASMAS":85,"MENOSMENOS":86,"RPUBLIC":87,"RPRIVATE":88,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"IDENTIFICADOR",14:"APAR",16:"CPAR",17:"ALLAVE",19:"CLLAVE",20:"RVOID",22:"COMA",30:"IGUAL",32:"RWHILE",33:"RDO",34:"RFOR",36:"PCOMA",40:"RCASE",41:"DOSPTS",42:"RDEFAULT",43:"RBREAK",44:"RCONTINUE",45:"RRETURN",46:"RSWITCH",47:"RIF",48:"RELSE",50:"RVAR",51:"DOSPUNTOSIGUAL",52:"RCONST",53:"RGLOBAL",55:"ACORCH",56:"CCORCH",57:"RINTEGER",58:"RDOUBLE",59:"RCHAR",60:"RBOOLEAN",61:"RIMPORT",63:"MENOS",64:"NOT",65:"MAS",66:"POR",67:"DIVIDIDO",68:"MODULO",69:"POTENCIA",70:"XOR",71:"OR",72:"AND",73:"IGUALIGUAL",74:"DIFIGUAL",75:"TRESIGUAL",76:"MAYOR",77:"MENOR",78:"MAYORIGUAL",79:"MENORIGUAL",80:"RFALSE",81:"RTRUE",82:"ENTERO",83:"DECIMAL",84:"CADENA",85:"MASMAS",86:"MENOSMENOS",87:"RPUBLIC",88:"RPRIVATE"},
productions_: [0,[3,3],[3,2],[5,2],[5,0],[7,2],[7,2],[7,1],[11,8],[11,8],[15,1],[15,0],[21,4],[21,2],[18,2],[18,0],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[28,4],[29,7],[29,9],[29,11],[35,1],[35,0],[37,1],[37,0],[38,1],[38,1],[38,0],[27,3],[27,2],[26,2],[26,2],[26,2],[26,3],[25,7],[24,7],[24,11],[24,9],[8,4],[8,4],[8,4],[8,4],[8,2],[12,1],[12,3],[54,1],[54,1],[54,1],[54,1],[54,1],[49,3],[49,1],[4,3],[62,3],[62,1],[31,2],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,4],[39,2],[39,2],[10,1],[10,1],[9,1],[9,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var arr = [];
		// cuado se haya reconocido la entrada completa retornamos el AST
		if($$[$0-2] != null){
			arr.push($$[$0-2]);
		}
		arr.push($$[$0-1]);
		return arr; 
	
break;
case 2:

		var arr = []; 
		arr.push($$[$0-1]); 
		return arr;
	
break;
case 3:
  $$[$0-1].hijos.push($$[$0]); this.$ = $$[$0-1];  
break;
case 4: case 15:
this.$ = new Instrucciones(this._$.first_line,this._$.first_column); 
break;
case 5: case 58: case 79:
 this.$ = $$[$0-1]; 
break;
case 6: case 7:
 this.$ = $$[$0]; 
break;
case 8:

					this.$ = new decfunc(this._$.first_line,this._$.first_column);
					this.$.tipo = $$[$0-7];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 9:

					this.$ = new decfunc(this._$.first_line,this._$.first_column);
					this.$.tipo = [vtipo.void];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 10: case 27: case 29: case 31: case 32: case 86:
this.$ = $$[$0];
break;
case 11:
this.$ = [];
break;
case 12:
 
				this.$ = $$[$0-3]; var n = new Param(this._$.first_line,this._$.first_column);
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n); 	
			 
break;
case 13:
 
				this.$ = []; var n  = new Param(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n);
	   	
break;
case 14:
$$[$0-1].hijos.push($$[$0]); this.$ = $$[$0-1];      
break;
case 16:
this.$ = $$[$0-1]; 
break;
case 17: case 18: case 19: case 20: case 21:
this.$ = $$[$0]; 
break;
case 22:
this.$ = $$[$0]
break;
case 23:

		this.$ = new Asignacion(this._$.first_line,this._$.first_column);
		var n = new Id(this._$.first_line,this._$.first_column);
		n.id = $$[$0-3]; 
		this.$.hijos.push(n) ; 
		this.$.hijos.push($$[$0-1]); 
		 
break;
case 24:

			this.$ = new While(this._$.first_line,this._$.first_column);
			this.$.hijos.push($$[$0-4]); 
			this.$.hijos.push($$[$0-1]); 
		
break;
case 25:

			this.$ = new do_while(this._$.first_line,this._$.first_column);
			this.$.hijos = [$$[$0-6], $$[$0-2]]; 

		
break;
case 26:

			this.$ = new For(this._$.first_line,this._$.first_column);
			this.$.hijos = [$$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]]; 
		
break;
case 28: case 30: case 33:
this.$ = null; 
break;
case 34:
this.$ = new Case(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0-1]); 
break;
case 35:
 this.$ = new Default(this._$.first_line,this._$.first_column); 
break;
case 36:
 this.$ = new Break(this._$.first_line,this._$.first_column); 
break;
case 37:
 this.$ = new Continue(this._$.first_line,this._$.first_column);  
break;
case 38:
 this.$ = new Return(this._$.first_line,this._$.first_column);   
break;
case 39:
this.$ = new Return(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0-1]);  
break;
case 40:

	this.$ = new Switch(this._$.first_line,this._$.first_column);
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push($$[$0-1]); 

break;
case 41:

		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-4]); 
		this.$.hijos.push($$[$0-1]); 
	
break;
case 42:

		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-8]); 
		this.$.hijos.push($$[$0-5]);
		this.$.hijos.push($$[$0-1]);
	
break;
case 43:

		
		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-6]); 
		this.$.hijos.push($$[$0-3]);
		this.$.hijos.push($$[$0]);
	
break;
case 44:

				var n = new Declaracion(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-3]; 
				n.hijos.push($$[$0-2]);
				n.hijos.push($$[$0]);
				this.$ = n; 
			
break;
case 45:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.var; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 46:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.const; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 47:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.global; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 48:

				var n = new Declaracion(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-1]; 
				n.hijos.push($$[$0]);

				this.$ = n; 
			
break;
case 49:
this.$ = [$$[$0]];
break;
case 50:
this.$ = [$$[$0-2], 0]; 
break;
case 51:
 this.$ = vtipo.integer; 	
break;
case 52:
 this.$ = vtipo.double;	
break;
case 53:
 this.$ = vtipo.char; 		
break;
case 54:
 this.$ = vtipo.boolean;	
break;
case 55:
 this.$ = $$[$0];				
break;
case 56:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2]; 
break;
case 57:
 
			var n = new  ListaId(this._$.first_line,this._$.first_column);
			n.hijos.push($$[$0]); 
			this.$ = n; 
		
break;
case 59:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2];
break;
case 60:
 var  n = new Importar(this._$.first_line,this._$.first_column); n.hijos.push($$[$0]); this.$ = n;   
break;
case 61:
this.$ = new expresionUnaria(this._$.first_line,this._$.first_column); 
								this.$.operando = voperando.menos; this.$.hijos.push($$[$0]);  
break;
case 62:
this.$ = new expresionUnaria(this._$.first_line,this._$.first_column);
								 this.$.operando = voperando.not;   this.$.hijos.push($$[$0]);  
break;
case 63:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mas; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]); 
break;
case 64:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menos; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 65:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.por; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 66:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.dividido; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 67:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.modulo; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 68:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.potencia; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 69:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.xor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 70:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.or; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 71:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.and; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 72:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.igualigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 73:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.difigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 74:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.trigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 75:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mayor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 76:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 77:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mayorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 78:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 80:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.boolean; this.$.valor = false; 		
break;
case 81:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.boolean; this.$.valor = true; 		
break;
case 82:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.integer; this.$.valor = Number($$[$0]); 	
break;
case 83:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.double; this.$.valor = Number($$[$0]);  	
break;
case 84:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.string; this.$.valor = $$[$0];  			
break;
case 85:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.id; this.$.valor = $$[$0]; 
break;
case 87:
 this.$ = new Casteo(this._$.first_line,this._$.first_column); this.$.tipo = vtipo.integer; this.$.hijos.push($$[$0]);   
break;
case 88:
 this.$ = new Casteo(this._$.first_line,this._$.first_column); this.$.tipo = vtipo.char; this.$.hijos.push($$[$0]);
break;
case 89:
 this.$ = new inc_dec(this._$.first_line,this._$.first_column); this.$.operando = voperando.masmas; this.$.id = $$[$0-1]; 
break;
case 90:
 this.$ = new inc_dec(this._$.first_line,this._$.first_column); this.$.operando = voperando.menosmenos; this.$.id = $$[$0-1]; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3,61:[1,4]}),{1:[3]},o($V0,$V1,{5:5}),{6:[1,6],7:7,8:8,10:9,11:10,12:11,13:$V2,20:$V3,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va,87:$Vb,88:$Vc},{13:[1,25],62:24},{6:[1,26],7:7,8:8,10:9,11:10,12:11,13:$V2,20:$V3,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va,87:$Vb,88:$Vc},{1:[2,2]},o($V0,[2,3]),o($V0,$Vd,{9:27,36:$Ve}),{11:29,12:30,13:$V2,20:$V3,54:18,57:$V7,58:$V8,59:$V9,60:$Va},o($V0,[2,7]),{13:[1,32],49:31},{13:[1,33]},{13:[1,34]},{13:[1,35]},o($Vf,[2,91]),o($Vf,[2,92]),{13:[1,36]},{13:[2,49],55:[1,37]},o($Vg,[2,51]),o($Vg,[2,52]),o($Vg,[2,53]),o($Vg,[2,54]),o($Vg,$Vh),o($V0,$Vd,{9:38,22:[1,39],36:$Ve}),o($Vi,[2,60]),{1:[2,1]},o($V0,[2,5]),o([6,13,16,19,20,32,33,34,40,42,43,44,45,46,47,50,52,53,57,58,59,60,87,88],[2,93]),o($V0,[2,6]),{13:[1,40]},o($Vj,[2,48],{22:[1,42],30:[1,41]}),o([6,13,20,22,30,36,50,52,53,57,58,59,60,87,88],$Vk,{14:$Vl}),{51:[1,44]},{51:[1,45]},{51:[1,46]},{14:[1,47]},{56:[1,48]},o($V0,[2,58]),{13:[1,49]},{14:$Vl},{13:$Vm,14:$Vn,31:50,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:[1,61]},{12:64,13:$V2,15:62,16:$Vv,21:63,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{13:$Vm,14:$Vn,31:65,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:66,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:67,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{12:64,13:$V2,15:68,16:$Vv,21:63,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{13:[2,50]},o($Vi,[2,59]),o($Vj,[2,44],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{13:$Vm,14:$Vn,31:85,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:86,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:87,39:60,57:[1,88],59:[1,89],63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},o($VM,[2,80]),o($VM,[2,81]),o($VM,[2,82]),o($VM,[2,83]),o($VM,[2,84]),o($VM,[2,85],{85:$VN,86:$VO}),o($VM,[2,86]),o([6,13,19,20,22,30,32,33,34,36,40,42,43,44,45,46,47,50,52,53,57,58,59,60,87,88],[2,56]),{16:[1,92]},{16:[2,10],22:[1,93]},{13:[1,94]},o($Vj,[2,45],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($Vj,[2,46],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($Vj,[2,47],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{16:[1,95]},{13:$Vm,14:$Vn,31:96,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:97,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:98,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:99,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:100,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:101,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:102,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:103,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:104,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:105,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:106,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:107,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:108,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:109,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:110,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:111,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},o($VM,[2,61]),o($VM,[2,62]),{16:[1,112],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{16:[1,113]},{16:[1,114]},o($VM,[2,89]),o($VM,[2,90]),{17:[1,115]},{12:116,13:$V2,54:18,57:$V7,58:$V8,59:$V9,60:$Va},o($VP,[2,13]),{17:[1,117]},o($VQ,[2,63],{66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VQ,[2,64],{66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VR,[2,65],{69:$VB}),o($VR,[2,66],{69:$VB}),o($VR,[2,67],{69:$VB}),o($VM,[2,68]),o([6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,70,87,88],[2,69],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o([6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,70,71,87,88],[2,70],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o([6,13,16,19,20,32,33,34,36,40,41,42,43,44,45,46,47,50,52,53,57,58,59,60,70,71,72,87,88],[2,71],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VS,[2,72],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VS,[2,73],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VS,[2,74],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VT,[2,75],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VT,[2,76],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VT,[2,77],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VT,[2,78],{63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB}),o($VM,[2,79]),{13:$Vm,14:$Vn,31:118,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:119,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},o($VU,$VV,{18:120}),{13:[1,121]},o($VU,$VV,{18:122}),o($VM,[2,87]),o($VM,[2,88]),{8:125,12:132,13:$VW,19:[1,123],23:124,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},o($VP,[2,12]),{8:125,12:132,13:$VW,19:[1,144],23:124,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},o($V0,[2,8]),o($VU,[2,14]),o($VU,$Vd,{9:145,36:$Ve}),o($VU,[2,17]),o($VU,[2,18]),o($VU,[2,19]),o($VU,[2,20]),o($VU,[2,21]),o($VU,[2,22]),{13:[1,146],49:31},{14:[1,147]},{14:[1,148]},o($VU,$Vd,{9:149,36:$Ve}),o($VU,$Vd,{9:150,36:$Ve}),{13:$Vm,14:$Vn,31:152,36:[1,151],39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:153,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{41:[1,154]},o($Vg,$Vh,{30:$V51}),{14:[1,156]},{17:[1,157]},{14:[1,158]},o($V0,[2,9]),o($VU,[2,16]),o([13,19,22,30,32,33,34,36,40,42,43,44,45,46,47,50,52,53,57,58,59,60],$Vk),{13:$Vm,14:$Vn,31:159,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:160,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),{36:[1,161],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{41:[1,162],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VU,[2,35]),{13:$Vm,14:$Vn,31:163,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:$Vm,14:$Vn,31:164,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{8:125,12:132,13:$VW,23:165,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{8:167,12:132,13:$V2,35:166,36:[2,28],50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{16:[1,168],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{16:[1,169],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VU,[2,39]),o($VU,[2,34]),o($V61,$Vd,{9:170,36:$Ve,63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{16:[1,171],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{19:[1,172]},{36:[1,173]},{36:[2,27]},{17:[1,174]},{17:[1,175]},o($V61,[2,23]),{17:[1,176]},{32:[1,177]},{13:$Vm,14:$Vn,31:179,36:[2,30],37:178,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{8:125,12:132,13:$VW,23:180,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{8:125,12:132,13:$VW,23:181,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{8:125,12:132,13:$VW,23:182,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{14:[1,183]},{36:[1,184]},{36:[2,29],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{19:[1,185]},{19:[1,186]},{19:[1,187]},{13:$Vm,14:$Vn,31:188,39:60,63:$Vo,64:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu},{13:[1,192],16:[2,33],28:190,38:189,39:191},o($VU,[2,41],{48:[1,193]}),o($VU,[2,40]),o($VU,[2,24]),{16:[1,194],63:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{16:[1,195]},{16:[2,31]},{16:[2,32]},{30:$V51,85:$VN,86:$VO},{17:[1,196],24:197,47:$V41},o($VU,$Vd,{9:198,36:$Ve}),{17:[1,199]},{8:125,12:132,13:$VW,23:200,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},o($VU,[2,43]),o($VU,[2,25]),{8:125,12:132,13:$VW,23:201,24:126,25:127,26:128,27:129,28:130,29:131,32:$VX,33:$VY,34:$VZ,40:$V_,42:$V$,43:$V01,44:$V11,45:$V21,46:$V31,47:$V41,50:$V4,52:$V5,53:$V6,54:18,57:$V7,58:$V8,59:$V9,60:$Va},{19:[1,202]},{19:[1,203]},o($VU,[2,42]),o($VU,[2,26])],
defaultActions: {6:[2,2],26:[2,1],48:[2,50],167:[2,27],190:[2,31],191:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'RNULL';
break;
case 4:return 61;
break;
case 5:return 80;
break;
case 6:return 81;
break;
case 7:return 46;
break;
case 8:return 44;
break;
case 9:return 88;
break;
case 10:return 'RDEFINE';
break;
case 11:return 'RTRY';
break;
case 12:return 57;
break;
case 13:return 50;
break;
case 14:return 40;
break;
case 15:return 45;
break;
case 16:return 20;
break;
case 17:return 'RAS';
break;
case 18:return 'RCATCH';
break;
case 19:return 58;
break;
case 20:return 52;
break;
case 21:return 47;
break;
case 22:return 42;
break;
case 23:return 'RPRINT';
break;
case 24:return 34;
break;
case 25:return 'RSTRC';
break;
case 26:return 'RTHROW';
break;
case 27:return 59;
break;
case 28:return 53;
break;
case 29:return 48;
break;
case 30:return 43;
break;
case 31:return 87;
break;
case 32:return 32;
break;
case 33:return 33; 
break;
case 34:return 60; 
break;
case 35:return "COMA";
break;
case 36:return 36;
break;
case 37:return 17;
break;
case 38:return 19;
break;
case 39:return 14;
break;
case 40:return 16;
break;
case 41:return "ACORCH";
break;
case 42:return "CCORCH";
break;
case 43:return 72
break;
case 44:return 71;
break;
case 45:return 85;
break;
case 46:return 86;
break;
case 47:return 65;
break;
case 48:return 63;
break;
case 49:return 66;
break;
case 50:return 67;
break;
case 51:return "POTENCIA";
break;
case 52:return "MODULO";  
break;
case 53:return "DOSPUNTOSIGUAL";
break;
case 54:return 79;
break;
case 55:return 78;
break;
case 56:return 75;
break;
case 57:return 73;
break;
case 58:return 74;
break;
case 59:return 77;
break;
case 60:return 76;
break;
case 61:return 30;
break;
case 62:return 70;
break;
case 63:return 64;
break;
case 64:return 41;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 66:return 83;
break;
case 67:return 82;
break;
case 68:return 13;
break;
case 69:return 6;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:import\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?::=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}