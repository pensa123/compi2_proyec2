/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,6,15,22,38,73,75,76,83,84,85,86,115,116],$V1=[2,4],$V2=[1,12],$V3=[1,22],$V4=[1,19],$V5=[1,20],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,17],$Ve=[1,18],$Vf=[2,142],$Vg=[1,31],$Vh=[15,22,83,84,85,86],$Vi=[2,95],$Vj=[15,40],$Vk=[2,6,13,15,22,24,38,73,75,76,83,84,85,86,115,116],$Vl=[2,6,15,21,22,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86,115,116],$Vm=[2,6,13,15,21,22,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86,115,116],$Vn=[2,102],$Vo=[1,49],$Vp=[1,56],$Vq=[1,70],$Vr=[1,63],$Vs=[1,77],$Vt=[1,74],$Vu=[1,61],$Vv=[1,62],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[2,13],$VD=[2,6,13,15,18,21,22,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86,115,116],$VE=[1,88],$VF=[1,87],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[1,102],$VU=[2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,115,116],$VV=[2,131],$VW=[1,113],$VX=[1,111],$VY=[1,112],$VZ=[1,108],$V_=[1,109],$V$=[1,114],$V01=[2,6,13,15,18,21,22,24,36,38,42,44,46,54,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,115,116],$V11=[1,152],$V21=[1,154],$V31=[21,24],$V41=[18,24],$V51=[24,42],$V61=[2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,90,92,97,98,99,100,101,102,103,104,105,106,115,116],$V71=[2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,90,92,93,94,95,97,98,99,100,101,102,103,104,105,106,115,116],$V81=[2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,97,98,99,100,101,102,115,116],$V91=[2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,97,98,99,100,101,102,103,104,105,106,115,116],$Va1=[2,15,21,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86],$Vb1=[2,17],$Vc1=[1,206],$Vd1=[1,215],$Ve1=[1,221],$Vf1=[1,220],$Vg1=[1,217],$Vh1=[1,218],$Vi1=[1,219],$Vj1=[1,213],$Vk1=[1,214],$Vl1=[1,210],$Vm1=[1,211],$Vn1=[1,212],$Vo1=[1,209],$Vp1=[1,208],$Vq1=[1,241],$Vr1=[1,240],$Vs1=[2,13,15,18,21,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"import":4,"instrucciones_cuerpo":5,"EOF":6,"instruccion_c":7,"declaracion":8,"fin":9,"visibilidad":10,"declararfuncion":11,"defest":12,"PCOMA":13,"tipo":14,"IDENTIFICADOR":15,"APAR":16,"params":17,"CPAR":18,"ALLAVE":19,"instrucciones_fun":20,"CLLAVE":21,"RVOID":22,"params2":23,"COMA":24,"instruccion_f":25,"si":26,"switch":27,"transferencia":28,"cases":29,"asignacion":30,"ciclos":31,"llamadaMetodo":32,"fprint":33,"inc_dec":34,"try_catch":35,"RTRY":36,"RCATCH":37,"RDEFINE":38,"RAS":39,"ACORCH":40,"listaest":41,"CCORCH":42,"aest":43,"IGUAL":44,"exp":45,"RPRINT":46,"lista_params":47,"lista_params2":48,"param":49,"sparam":50,"DOLAR":51,"pvalor":52,"otro":53,"PUNTO":54,"otro2":55,"otrofin":56,"RWHILE":57,"RDO":58,"RFOR":59,"ifor":60,"mfor":61,"ffor":62,"RCASE":63,"DOSPTS":64,"RDEFAULT":65,"RBREAK":66,"RCONTINUE":67,"RRETURN":68,"RSWITCH":69,"RIF":70,"RELSE":71,"listaID":72,"RVAR":73,"DOSPUNTOSIGUAL":74,"RCONST":75,"RGLOBAL":76,"valarray":77,"RSTRC":78,"tp":79,"arrvalue":80,"listavarr":81,"elemarr":82,"RINTEGER":83,"RDOUBLE":84,"RCHAR":85,"RBOOLEAN":86,"RIMPORT":87,"listaimport":88,"ARCHIVO":89,"MENOS":90,"NOT":91,"MAS":92,"POR":93,"DIVIDIDO":94,"MODULO":95,"POTENCIA":96,"XOR":97,"OR":98,"AND":99,"IGUALIGUAL":100,"DIFIGUAL":101,"TRESIGUAL":102,"MAYOR":103,"MENOR":104,"MAYORIGUAL":105,"MENORIGUAL":106,"RFALSE":107,"RTRUE":108,"ENTERO":109,"DECIMAL":110,"CADENA":111,"CHAR":112,"MASMAS":113,"MENOSMENOS":114,"RPUBLIC":115,"RPRIVATE":116,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"PCOMA",15:"IDENTIFICADOR",16:"APAR",18:"CPAR",19:"ALLAVE",21:"CLLAVE",22:"RVOID",24:"COMA",36:"RTRY",37:"RCATCH",38:"RDEFINE",39:"RAS",40:"ACORCH",42:"CCORCH",44:"IGUAL",46:"RPRINT",51:"DOLAR",54:"PUNTO",57:"RWHILE",58:"RDO",59:"RFOR",63:"RCASE",64:"DOSPTS",65:"RDEFAULT",66:"RBREAK",67:"RCONTINUE",68:"RRETURN",69:"RSWITCH",70:"RIF",71:"RELSE",73:"RVAR",74:"DOSPUNTOSIGUAL",75:"RCONST",76:"RGLOBAL",78:"RSTRC",83:"RINTEGER",84:"RDOUBLE",85:"RCHAR",86:"RBOOLEAN",87:"RIMPORT",89:"ARCHIVO",90:"MENOS",91:"NOT",92:"MAS",93:"POR",94:"DIVIDIDO",95:"MODULO",96:"POTENCIA",97:"XOR",98:"OR",99:"AND",100:"IGUALIGUAL",101:"DIFIGUAL",102:"TRESIGUAL",103:"MAYOR",104:"MENOR",105:"MAYORIGUAL",106:"MENORIGUAL",107:"RFALSE",108:"RTRUE",109:"ENTERO",110:"DECIMAL",111:"CADENA",112:"CHAR",113:"MASMAS",114:"MENOSMENOS",115:"RPUBLIC",116:"RPRIVATE"},
productions_: [0,[3,3],[3,2],[5,2],[5,0],[7,2],[7,2],[7,1],[7,1],[7,2],[11,8],[11,8],[17,1],[17,0],[23,4],[23,2],[20,2],[20,0],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,2],[25,1],[25,2],[25,2],[25,2],[25,1],[25,2],[35,12],[12,7],[41,3],[41,1],[43,2],[43,4],[33,4],[32,3],[47,1],[47,2],[48,1],[48,3],[49,1],[49,3],[50,1],[50,2],[30,3],[30,3],[53,3],[53,1],[55,4],[55,1],[55,3],[56,4],[56,3],[56,5],[31,7],[31,9],[31,11],[60,1],[60,1],[60,1],[60,0],[61,1],[61,0],[62,1],[62,1],[62,0],[29,3],[29,2],[28,2],[28,2],[28,2],[28,3],[27,7],[26,7],[26,11],[26,9],[8,4],[8,4],[8,4],[8,4],[8,2],[52,1],[52,1],[77,5],[77,5],[77,1],[80,3],[81,3],[81,1],[82,1],[14,1],[14,3],[14,1],[14,3],[79,1],[79,1],[79,1],[79,1],[72,3],[72,1],[4,3],[88,3],[88,1],[45,2],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,4],[45,4],[34,2],[34,2],[10,1],[10,1],[9,1],[9,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var arr = [];
		// cuado se haya reconocido la entrada completa retornamos el AST
		if($$[$0-2] != null){
			arr.push($$[$0-2]);
		}
		arr.push($$[$0-1]);
		return arr; 
	
break;
case 2:

		var arr = []; 
		arr.push($$[$0-1]); 
		return arr;
	
break;
case 3:
 if($$[$0] != null){ $$[$0-1].hijos.push($$[$0]);} this.$ = $$[$0-1];  
break;
case 4: case 17:
this.$ = new Instrucciones(_$[$0].first_line,_$[$0].first_column); 
break;
case 5: case 103: case 124:
 this.$ = $$[$0-1]; 
break;
case 6: case 7:
 this.$ = $$[$0]; 
break;
case 8: case 19: case 20: case 21: case 22: case 23: case 40: case 84: case 88: case 92:
this.$ = $$[$0]; 
break;
case 9: case 30:
 
					//nerror("Linea " + _$[$0-1].first_line + " Columna " + _$[$0-1].first_column +  ", Error sintactico recuperado en.'" + $$[$0-1] + "'\n" + lastNodo); this.$ = null; 
					nerror2(_$[$0-1].first_line , _$[$0-1].first_column , "Sintactico" , "Error sintactico recuperado en.'" + $$[$0-1] + "'\n" + lastNodo);
					this.$ = null; 
				
break;
case 10:

					this.$ = new decfunc(_$[$0-7].first_line,_$[$0-7].first_column);
					this.$.tipo = $$[$0-7];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 11:

					this.$ = new decfunc(_$[$0-7].first_line,_$[$0-7].first_column);
					this.$.tipo = [vtipo.void];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 12: case 29: case 50: case 60: case 61: case 62: case 64: case 66: case 67:
this.$ = $$[$0];
break;
case 13:
this.$ = [];
break;
case 14:
 
				this.$ = $$[$0-3]; var n = new Param(_$[$0-3].first_line,_$[$0-3].first_column);
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n); 	
			 
break;
case 15:
 
				this.$ = []; var n  = new Param(_$[$0-1].first_line,_$[$0-1].first_column); 
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n);
	   	
break;
case 16:
if($$[$0] != null) {$$[$0-1].hijos.push($$[$0]); } this.$ = $$[$0-1];      
break;
case 18: case 24:
this.$ = $$[$0-1]; 
break;
case 25:
this.$ = $$[$0]
break;
case 26:
this.$ = $$[$0-1]; this.$.exp = false; 
break;
case 27: case 28:
this.$ = $$[$0-1]
break;
case 31:

	this.$ = new Try_catch(_$[$0-11].first_line , _$[$0-11].first_column);
	this.$.hijos.push($$[$0-9]); 
	this.$.hijos.push($$[$0-5]); 
	this.$.hijos.push($$[$0-4]); 
	this.$.hijos.public($$[$0-3]);

break;
case 32:

		this.$ = new estructura(_$[$0-6].first_line,_$[$0-6].first_column);
		this.$.hijos= ($$[$0-2]); 
		this.$.id = $$[$0-5]; 
	
break;
case 33: case 42:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 34:
 this.$ = [$$[$0]];  
break;
case 35:
 this.$ = new atributoEst(_$[$0-1].first_line,_$[$0-1].first_column); this.$.id = $$[$0]; this.$.tipo = $$[$0-1];  
break;
case 36:

			this.$ = new atributoEst(_$[$0-3].first_line,_$[$0-3].first_column); this.$.id = $$[$0-2]; this.$.tipo = $$[$0-3]; this.$.hijos.push($$[$0]); 
		 
break;
case 37:
 this.$ = new Print(_$[$0-3].first_line,_$[$0-3].first_column); this.$.hijos.push($$[$0-1]);    
break;
case 38:
this.$ = new llamadaFunc(_$[$0-2].first_line,_$[$0-2].first_column);
						this.$.hijos = $$[$0-1]; this.$.id = $$[$0-2];  
break;
case 39:
 this.$ = [];  
break;
case 41:
this.$ = [$$[$0]]; 
break;
case 43:
this.$ = $$[$0]; this.$.id = null; 
break;
case 44:
this.$ = $$[$0];
		var n = new Id(_$[$0-2].first_line,_$[$0-2].first_column);
		n.id = $$[$0-2]; 
		this.$.hijos.unshift(n);
	 
break;
case 45:
 this.$ = new SParam(_$[$0].first_line,_$[$0].first_column); this.$.hijos.push($$[$0]); this.$.ref = false;  
break;
case 46:
this.$ = new SParam(_$[$0-1].first_line,_$[$0-1].first_column); this.$.hijos.push($$[$0]); this.$.ref = true; 
break;
case 47:

		this.$ = new Asignacion(_$[$0-2].first_line,_$[$0-2].first_column);
		var n = new Id(_$[$0-2].first_line, _$[$0-2].first_column);
		n.id = $$[$0-2]; 
		this.$.hijos.push(n) ; 
		this.$.hijos.push($$[$0]); 
		 
break;
case 48:

			this.$ = new Asignacion(_$[$0-2].first_line , _$[$0-2].first_column); 
			var n = new laccesos(_$[$0-1].first_line , _$[$0-1].first_column);
			n.hijos = $$[$0-2]; 
			this.$.hijos.push(n); 
			this.$.hijos.push($$[$0]); 			
		
break;
case 49:
  
			this.$ = $$[$0-2]; 
			for(var a = 0; a < $$[$0].length; a++){
				this.$.push($$[$0][a]); 
			}
		
break;
case 51: case 54:

	var n  = new  AccesoArr(_$[$0-2].first_line , _$[$0-2].first_column); 
	var n2 = new Id(_$[$0-3].first_line, _$[$0-3].first_column);
	n2.id = $$[$0-3]; 
	n.hijos.push($$[$0-1]); 
	this.$ = [n2 , n];
	
break;
case 52:

		var n = new Id(_$[$0].first_line , _$[$0].first_column);
		n.id = $$[$0]; 
		this.$= [n]; 	
	
break;
case 53:

		var n = new accesofunc(_$[$0-2].first_line , _$[$0-2].first_column);
		n.id = $$[$0-2]; 
		this.$= [n];
	
break;
case 55:

		var n = new Id(_$[$0-2].first_line , _$[$0-2].first_column);
		n.id = $$[$0-2]; 
		var n2 = new Id(_$[$0].first_line , _$[$0].first_column);
		n2.id = $$[$0]; 
		this.$ = [n , n2];
	
break;
case 56:

		var n = new Id(_$[$0-4].first_line , _$[$0-4].first_column);
		n.id = $$[$0-4]; 
		var n2 = new accesofunc(_$[$0-2].first_line , _$[$0-2].first_column);
		n2.id = $$[$0-2]; 
		this.$ = [n , n2];
	
break;
case 57:

			this.$ = new While(_$[$0-6].first_line,_$[$0-6].first_column);
			this.$.hijos.push($$[$0-4]); 
			this.$.hijos.push($$[$0-1]); 
		
break;
case 58:

			this.$ = new do_while(_$[$0-8].first_line,_$[$0-8].first_column);
			this.$.hijos = [$$[$0-6], $$[$0-2]]; 

		
break;
case 59:

			this.$ = new For(_$[$0-10].first_line,_$[$0-10].first_column);
			this.$.hijos = [$$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]]; 
		
break;
case 63: case 65: case 68:
this.$ = null; 
break;
case 69:
this.$ = new Case(_$[$0-2].first_line,_$[$0-2].first_column); this.$.hijos.push($$[$0-1]); 
break;
case 70:
 this.$ = new Default(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 71:
 this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 72:
 this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column);  
break;
case 73:
 this.$ = new Return(_$[$0-1].first_line,_$[$0-1].first_column);   
break;
case 74:
this.$ = new Return(_$[$0-2].first_line,_$[$0-2].first_column); this.$.hijos.push($$[$0-1]);  
break;
case 75:

	this.$ = new Switch(_$[$0-6].first_line,_$[$0-6].first_column);
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push($$[$0-1]); 

break;
case 76:

		this.$ = new If(_$[$0-6].first_line,_$[$0-6].first_column); 
		this.$.hijos.push($$[$0-4]); 
		this.$.hijos.push($$[$0-1]); 
	
break;
case 77:

		this.$ = new If(_$[$0-10].first_line,_$[$0-10].first_column); 
		this.$.hijos.push($$[$0-8]); 
		this.$.hijos.push($$[$0-5]);
		this.$.hijos.push($$[$0-1]);
	
break;
case 78:

		
		this.$ = new If(_$[$0-8].first_line,_$[$0-8].first_column); 
		this.$.hijos.push($$[$0-6]); 
		this.$.hijos.push($$[$0-3]);
		this.$.hijos.push($$[$0]);
	
break;
case 79:

				var n = new Declaracion(_$[$0-3].first_line,_$[$0-3].first_column); 
				n.tipo = $$[$0-3]; 
				n.hijos.push($$[$0-2]);
				n.hijos.push($$[$0]);
				this.$ = n; 
			
break;
case 80:

				this.$ = new Dect2_4(_$[$0-3].first_line,_$[$0-3].first_column); 
				this.$.tipo = vddi.var; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 81:

				this.$ = new Dect2_4(_$[$0-3].first_line,_$[$0-3].first_column); 
				this.$.tipo = vddi.const; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 82:

				this.$ = new Dect2_4(_$[$0-3].first_line,_$[$0-3].first_column); 
				this.$.tipo = vddi.global; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 83:

				var n = new Declaracion(_$[$0-1].first_line,_$[$0-1].first_column); 
				n.tipo = $$[$0-1]; 
				n.hijos.push($$[$0]);

				this.$ = n; 
			
break;
case 86: case 87:
this.$ = new niu_arr(_$[$0-4].first_line, _$[$0-4].first_column); this.$.tipo = $$[$0-3]; this.$.hijos.push($$[$0-1]);  
break;
case 89:
 this.$ = new arr_content(_$[$0-2].first_line , _$[$0-2].first_column); this.$.hijos = $$[$0-1]; 
break;
case 90:
this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 91:
this.$ = []; this.$.push($$[$0]); 
break;
case 93:
this.$ = [$$[$0]];
break;
case 94: case 96:
this.$ = [$$[$0-2], 0]; 
break;
case 95:
 this.$ = [$$[$0]];	
break;
case 97:
 this.$ = vtipo.integer; 	
break;
case 98:
 this.$ = vtipo.double;	
break;
case 99:
 this.$ = vtipo.char; 		
break;
case 100:
 this.$ = vtipo.boolean;	
break;
case 101:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2]; 
break;
case 102:
 
			var n = new  ListaId(_$[$0].first_line,_$[$0].first_column);
			n.hijos.push($$[$0]); 
			this.$ = n; 
		
break;
case 104:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2];
break;
case 105:
 var  n = new Importar(_$[$0].first_line,_$[$0].first_column); n.hijos.push($$[$0]); this.$ = n;   
break;
case 106:
this.$ = new expresionUnaria(_$[$0-1].first_line,_$[$0-1].first_column); 
								this.$.operando = voperando.menos; this.$.hijos.push($$[$0]);  
break;
case 107:
this.$ = new expresionUnaria(_$[$0-1].first_line,_$[$0-1].first_column);
								 this.$.operando = voperando.not;   this.$.hijos.push($$[$0]);  
break;
case 108:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.mas; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]); 
break;
case 109:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.menos; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 110:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.por; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 111:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.dividido; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 112:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.modulo; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 113:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.potencia; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 114:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.xor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 115:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.or; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 116:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.and; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 117:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.igualigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 118:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.difigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 119:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.trigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 120:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.mayor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 121:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.menor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 122:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.mayorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 123:
this.$ = new expresion_binaria(_$[$0-2].first_line,_$[$0-2].first_column); this.$.operando = voperando.menorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 125:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.boolean; this.$.valor = false; 		
break;
case 126:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.boolean; this.$.valor = true; 		
break;
case 127:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.integer; this.$.valor = Number($$[$0]); 	
break;
case 128:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.double; this.$.valor = Number($$[$0]);  	
break;
case 129:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.string; this.$.valor = $$[$0];  			
break;
case 130:
 this.$ = new primitivo(_$[$0].first_line,_$[$0].first_column); this.$.tipo = vprim.char; this.$.valor = $$[$0];  			
break;
case 131:
 this.$ = new Id(_$[$0].first_line,_$[$0].first_column); this.$.id = $$[$0]; this.$.exp = true;  
break;
case 132:
 var n = new laccesos(_$[$0].first_line , _$[$0].first_column); n.hijos = $$[$0]; this.$ = n; this.$.exp = true; 
break;
case 133:
this.$ = $$[$0]; this.$.retValor = true; 
break;
case 134:
this.$ = $$[$0]; this.$.exp = true;  
break;
case 135:
 this.$ = new Casteo(_$[$0-3].first_line,_$[$0-3].first_column); this.$.tipo = vtipo.integer; this.$.hijos.push($$[$0]);   
break;
case 136:
 this.$ = new Casteo(_$[$0-3].first_line,_$[$0-3].first_column); this.$.tipo = vtipo.char; this.$.hijos.push($$[$0]);
break;
case 137:
 this.$ = new inc_dec(_$[$0-1].first_line,_$[$0-1].first_column); this.$.operando = voperando.masmas; this.$.id = $$[$0-1]; this.$.retValor = false; 
break;
case 138:
 this.$ = new inc_dec(_$[$0-1].first_line,_$[$0-1].first_column); this.$.operando = voperando.menosmenos; this.$.id = $$[$0-1]; this.$.retValor = false; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3,87:[1,4]}),{1:[3]},o($V0,$V1,{5:5}),{2:$V2,6:[1,6],7:7,8:8,10:9,11:10,12:11,14:13,15:$V3,22:$V4,38:$V5,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc,115:$Vd,116:$Ve},{88:27,89:[1,28]},{2:$V2,6:[1,29],7:7,8:8,10:9,11:10,12:11,14:13,15:$V3,22:$V4,38:$V5,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc,115:$Vd,116:$Ve},{1:[2,2]},o($V0,[2,3]),o($V0,$Vf,{9:30,13:$Vg}),{11:32,14:33,15:$V3,22:$V4,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($V0,[2,7]),o($V0,[2,8]),{13:[1,34]},{15:[1,36],72:35},{15:[1,37]},{15:[1,38]},{15:[1,39]},o($Vh,[2,139]),o($Vh,[2,140]),{15:[1,40]},{15:[1,41]},{15:[2,93],40:[1,42]},{15:$Vi,40:[1,43]},o($Vj,[2,97]),o($Vj,[2,98]),o($Vj,[2,99]),o($Vj,[2,100]),o($V0,$Vf,{9:44,13:$Vg,24:[1,45]}),o($Vk,[2,105]),{1:[2,1]},o($V0,[2,5]),o($Vl,[2,141]),o($V0,[2,6]),{15:[1,46]},o($V0,[2,9]),o($Vm,[2,83],{24:[1,48],44:[1,47]}),o([2,6,13,15,22,24,38,44,73,75,76,83,84,85,86,115,116],$Vn,{16:$Vo}),{74:[1,50]},{74:[1,51]},{74:[1,52]},{16:[1,53]},{39:[1,54]},{42:[1,55]},{42:$Vp},o($V0,[2,103]),{89:[1,57]},{16:$Vo},{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:58,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:[1,78]},{14:81,15:$V3,17:79,18:$VC,23:80,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:82,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:83,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:84,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{14:81,15:$V3,17:85,18:$VC,23:80,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{40:[1,86]},{15:[2,94]},{15:[2,96]},o($Vk,[2,104]),o($Vm,[2,79]),o($VD,[2,84],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),o($VD,[2,85]),{15:$Vq,16:$Vr,32:73,34:72,45:103,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:104,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:105,53:71,56:76,83:[1,106],85:[1,107],90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VU,[2,125]),o($VU,[2,126]),o($VU,[2,127]),o($VU,[2,128]),o($VU,[2,129]),o($VU,[2,130]),o($VU,$VV,{47:110,16:$VW,40:$VX,54:$VY,113:$VZ,114:$V_}),o($VU,[2,132],{54:$V$}),o($VU,[2,133]),o($VU,[2,134]),{15:[1,116],79:115,83:$V9,84:$Va,85:$Vb,86:$Vc},o($VD,[2,88]),o($V01,[2,50]),{15:$Vq,16:$Vr,32:73,34:72,45:119,53:71,56:76,81:117,82:118,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o([2,6,13,15,21,22,24,36,38,44,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86,115,116],[2,101]),{18:[1,120]},{18:[2,12],24:[1,121]},{15:[1,122]},o($Vm,[2,80]),o($Vm,[2,81]),o($Vm,[2,82]),{18:[1,123]},{14:126,15:$V3,41:124,43:125,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{15:$Vq,16:$Vr,32:73,34:72,45:127,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:128,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:129,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:130,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:131,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:132,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:133,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:134,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:135,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:136,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:137,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:138,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:139,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:140,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:141,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:142,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VU,[2,106]),o($VU,[2,107]),{18:[1,143],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{18:[1,144]},{18:[1,145]},o($VU,[2,137]),o($VU,[2,138]),{18:[1,146]},{15:$Vq,16:$Vr,32:73,34:72,45:147,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:[1,148]},{15:$V11,16:$Vr,18:[2,39],32:73,34:72,45:153,48:149,49:150,50:151,51:$V21,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:[1,156],55:155},{40:[1,157]},{40:[1,158]},{21:[1,159],24:[1,160]},o($V31,[2,91]),o($V31,[2,92],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),{19:[1,161]},{14:162,15:$V3,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($V41,[2,15]),{19:[1,163]},{24:[1,165],42:[1,164]},o($V51,[2,34]),{15:[1,166]},o($V61,[2,108],{93:$VG,94:$VH,95:$VI,96:$VJ}),o($V61,[2,109],{93:$VG,94:$VH,95:$VI,96:$VJ}),o($V71,[2,110],{96:$VJ}),o($V71,[2,111],{96:$VJ}),o($V71,[2,112],{96:$VJ}),o($VU,[2,113]),o([2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,97,115,116],[2,114],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),o([2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,97,98,115,116],[2,115],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),o([2,6,13,15,18,21,22,24,36,38,42,46,57,58,59,63,64,65,66,67,68,69,70,73,75,76,83,84,85,86,97,98,99,115,116],[2,116],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),o($V81,[2,117],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,103:$VQ,104:$VR,105:$VS,106:$VT}),o($V81,[2,118],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,103:$VQ,104:$VR,105:$VS,106:$VT}),o($V81,[2,119],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,103:$VQ,104:$VR,105:$VS,106:$VT}),o($V91,[2,120],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ}),o($V91,[2,121],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ}),o($V91,[2,122],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ}),o($V91,[2,123],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ}),o($VU,[2,124]),{15:$Vq,16:$Vr,32:73,34:72,45:167,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:168,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VU,[2,38]),{42:[1,169],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},o($V01,[2,55],{47:170,16:$VW}),{18:[2,40],24:[1,171]},o($V41,[2,41]),o($V41,[2,43]),o([18,24,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],$VV,{47:110,16:$VW,40:$VX,44:[1,172],54:$VY,113:$VZ,114:$V_}),o($V41,[2,45],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),{15:$Vq,16:$Vr,32:73,34:72,45:173,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($V01,[2,49]),o($V01,[2,52],{47:175,16:$VW,40:[1,174]}),{15:$Vq,16:$Vr,32:73,34:72,45:176,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:177,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($VD,[2,89]),{15:$Vq,16:$Vr,32:73,34:72,45:119,53:71,56:76,82:178,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Va1,$Vb1,{20:179}),{15:[1,180]},o($Va1,$Vb1,{20:181}),o($Vl,$Vf,{9:182,13:$Vg}),{14:126,15:$V3,43:183,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($V51,[2,35],{44:[1,184]}),o($VU,[2,135]),o($VU,[2,136]),o($V01,[2,54]),{18:[1,185]},{15:$V11,16:$Vr,32:73,34:72,45:153,49:186,50:151,51:$V21,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:153,50:187,51:$V21,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($V41,[2,46],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),{15:$Vq,16:$Vr,32:73,34:72,45:188,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{18:[1,189]},{42:[1,190],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{42:[1,191],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},o($V31,[2,90]),{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,192],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($V41,[2,14]),{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,222],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($Vl,[2,32]),o($V51,[2,33]),{15:$Vq,16:$Vr,32:73,34:72,45:223,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($V01,[2,56]),o($V41,[2,42]),o($V41,[2,44]),{42:[1,224],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},o($V01,[2,53]),o($VD,[2,86]),o($VD,[2,87]),o($V0,[2,10]),o($Va1,[2,16]),o($Va1,$Vf,{9:225,13:$Vg}),o($Va1,[2,19]),o($Va1,[2,20]),o($Va1,[2,21]),o($Va1,[2,22]),o($Va1,[2,23]),o($Va1,$Vf,{9:226,13:$Vg}),o($Va1,[2,25]),o($Va1,$Vf,{9:227,13:$Vg}),o($Va1,$Vf,{9:228,13:$Vg}),o($Va1,$Vf,{9:229,13:$Vg}),o($Va1,[2,29]),{13:[1,230]},{15:[1,231],72:35},{16:[1,232]},{16:[1,233]},o($Va1,$Vf,{9:234,13:$Vg}),o($Va1,$Vf,{9:235,13:$Vg}),{13:[1,236],15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:237,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:238,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{64:[1,239]},{15:$Vi,16:$VW,40:$Vq1,44:$Vr1,47:110,54:$VY,113:$VZ,114:$V_},{44:[1,242],54:$V$},{16:[1,243]},{19:[1,244]},{16:[1,245]},{16:[1,246]},{19:[1,247]},o($V0,[2,11]),o($V51,[2,36],{90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT}),o($V01,[2,51]),o($Va1,[2,18]),o($Va1,[2,24]),o($Va1,[2,26]),o($Va1,[2,27]),o($Va1,[2,28]),o($Va1,[2,30]),o([2,13,15,21,24,36,38,44,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86],$Vn),{15:$Vq,16:$Vr,32:73,34:72,45:248,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:249,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Va1,[2,71]),o($Va1,[2,72]),o($Va1,[2,73]),{13:[1,250]},{64:[1,251],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},o($Va1,[2,70]),{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:252,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,42:$Vp,45:147,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,19:$Vs,32:73,34:72,45:59,52:253,53:71,56:76,77:60,78:$Vt,80:75,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:$Vq,16:$Vr,32:73,34:72,45:254,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Va1,$Vb1,{20:255}),{8:257,13:[2,63],14:207,15:[1,260],30:258,34:259,53:216,56:76,60:256,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{15:$Vq,16:$Vr,32:73,34:72,45:261,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o($Va1,$Vb1,{20:262}),{18:[1,263],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{18:[1,264],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},o($Va1,[2,74]),o($Va1,[2,69]),o($Vs1,[2,47]),o($Vs1,[2,48]),{18:[1,265],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,266],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{13:[1,267]},{13:[2,60]},{13:[2,61]},{13:[2,62]},{15:$Vi,40:$Vq1,44:$Vr1,54:$VY,113:$VZ,114:$V_},{18:[1,268],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,269],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{19:[1,270]},{19:[1,271]},{19:[1,272]},{57:[1,273]},{13:[2,65],15:$Vq,16:$Vr,32:73,34:72,45:275,53:71,56:76,61:274,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},o([2,13,15,21,36,38,46,57,58,59,63,65,66,67,68,69,70,73,75,76,83,84,85,86],[2,37]),{37:[1,276]},o($Va1,$Vb1,{20:277}),o($Va1,$Vb1,{20:278}),o($Va1,$Vb1,{20:279}),{16:[1,280]},{13:[1,281]},{13:[2,64],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{16:[1,282]},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,283],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,284],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,285],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{15:$Vq,16:$Vr,32:73,34:72,45:286,53:71,56:76,90:$Vu,91:$Vv,107:$Vw,108:$Vx,109:$Vy,110:$Vz,111:$VA,112:$VB},{15:[1,290],18:[2,68],30:288,34:289,53:216,56:76,62:287},{15:[1,291]},o($Va1,[2,76],{71:[1,292]}),o($Va1,[2,75]),o($Va1,[2,57]),{18:[1,293],90:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT},{18:[1,294]},{18:[2,66]},{18:[2,67]},{40:$VX,44:$Vr1,54:$VY,113:$VZ,114:$V_},{15:[1,295]},{19:[1,296],26:297,70:$Vp1},o($Va1,$Vf,{9:298,13:$Vg}),{19:[1,299]},{18:[1,300]},o($Va1,$Vb1,{20:301}),o($Va1,[2,78]),o($Va1,[2,58]),o($Va1,$Vb1,{20:302}),{19:[1,303]},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,304],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,305],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($Va1,$Vb1,{20:306}),o($Va1,[2,77]),o($Va1,[2,59]),{2:$Vc1,8:194,12:195,14:207,15:$Vd1,21:[1,307],25:193,26:196,27:197,28:198,29:199,30:200,31:201,32:202,33:203,34:204,35:205,36:$Ve1,38:$V5,46:$Vf1,53:216,56:76,57:$Vg1,58:$Vh1,59:$Vi1,63:$Vj1,65:$Vk1,66:$Vl1,67:$Vm1,68:$Vn1,69:$Vo1,70:$Vp1,73:$V6,75:$V7,76:$V8,79:21,83:$V9,84:$Va,85:$Vb,86:$Vc},o($Va1,[2,31])],
defaultActions: {6:[2,2],29:[2,1],55:[2,94],56:[2,96],257:[2,60],258:[2,61],259:[2,62],288:[2,66],289:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'RNULL';
break;
case 4:return 87;
break;
case 5:return 107;
break;
case 6:return 108;
break;
case 7:return 69;
break;
case 8:return 67;
break;
case 9:return 116;
break;
case 10:return 38;
break;
case 11:return 36;
break;
case 12:return 83;
break;
case 13:return 73;
break;
case 14:return 63;
break;
case 15:return 68;
break;
case 16:return 22;
break;
case 17:return 39;
break;
case 18:return 37;
break;
case 19:return 84;
break;
case 20:return 75;
break;
case 21:return 70;
break;
case 22:return 65;
break;
case 23:return 46;
break;
case 24:return 59;
break;
case 25:return 78;
break;
case 26:return 'RTHROW';
break;
case 27:return 85;
break;
case 28:return 76;
break;
case 29:return 71;
break;
case 30:return 66;
break;
case 31:return 115;
break;
case 32:return 57;
break;
case 33:return 58; 
break;
case 34:return 86; 
break;
case 35:return "COMA";
break;
case 36:return 13;
break;
case 37:return 19;
break;
case 38:return 21;
break;
case 39:return 16;
break;
case 40:return 18;
break;
case 41:return "ACORCH";
break;
case 42:return "CCORCH";
break;
case 43:return 99
break;
case 44:return 98;
break;
case 45:return 51;
break;
case 46:return 113;
break;
case 47:return 114;
break;
case 48:return 92;
break;
case 49:return 90;
break;
case 50:return 93;
break;
case 51:return 94;
break;
case 52:return "POTENCIA";
break;
case 53:return "MODULO";  
break;
case 54:return "DOSPUNTOSIGUAL";
break;
case 55:return 106;
break;
case 56:return 105;
break;
case 57:return 102;
break;
case 58:return 100;
break;
case 59:return 101;
break;
case 60:return 104;
break;
case 61:return 103;
break;
case 62:return 44;
break;
case 63:return 97;
break;
case 64:return 91;
break;
case 65:return 64;
break;
case 66:return 54;
break;
case 67: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); yy_.yytext = replaceCadena(yy_.yytext);  return 111; 
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 112; 
break;
case 69:return 110;
break;
case 70:return 109;
break;
case 71:return "ARCHIVO";
break;
case 72: yy_.yytext = yy_.yytext.toLowerCase();  return 15
break;
case 73:return 6;
break;
case 74:   //console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						//nerror("Linea " + yy_.yylloc.first_line + " Columna " + yy_.yylloc.first_column +  ", Error lexico  '" + yy_.yytext + "' no reconocido."); 
						nerror2(yy_.yylloc.first_line , yy_.yylloc.first_column , "Lexico","'"+ yy_.yytext +"' no reconocido.");
					 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:import\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?::=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:\.)/i,/^(?:["\""]((\\")|[^"\""])*["\""])/i,/^(?:'[^\'']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9_.-])+(\.j))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}