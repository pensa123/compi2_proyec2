/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,14,21,33,66,68,69,76,77,78,79,107,108],$V1=[2,4],$V2=[1,25],$V3=[1,18],$V4=[1,19],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,16],$Vd=[1,17],$Ve=[2,122],$Vf=[1,30],$Vg=[14,21,76,77,78,79],$Vh=[14,35],$Vi=[2,82],$Vj=[6,14,21,23,33,51,66,68,69,76,77,78,79,107,108],$Vk=[6,14,20,21,33,41,47,48,49,51,55,57,58,59,60,61,62,66,68,69,76,77,78,79,107,108],$Vl=[2,84],$Vm=[1,46],$Vn=[1,64],$Vo=[1,58],$Vp=[1,56],$Vq=[1,57],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[2,12],$Vx=[1,77],$Vy=[1,76],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,107,108],$VO=[2,112],$VP=[1,100],$VQ=[1,97],$VR=[1,98],$VS=[1,131],$VT=[1,133],$VU=[17,23],$VV=[23,37],$VW=[6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,83,85,90,91,92,93,94,95,96,97,98,99,107,108],$VX=[6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,83,85,86,87,88,90,91,92,93,94,95,96,97,98,99,107,108],$VY=[6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,90,91,92,93,94,95,107,108],$VZ=[6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,90,91,92,93,94,95,96,97,98,99,107,108],$V_=[14,20,33,41,47,48,49,55,57,58,59,60,61,62,66,68,69,76,77,78,79],$V$=[2,16],$V01=[6,14,20,21,33,41,47,48,49,55,57,58,59,60,61,62,66,68,69,76,77,78,79,107,108],$V11=[1,173],$V21=[1,177],$V31=[1,174],$V41=[1,175],$V51=[1,176],$V61=[1,171],$V71=[1,172],$V81=[1,168],$V91=[1,169],$Va1=[1,170],$Vb1=[1,167],$Vc1=[1,166],$Vd1=[1,191],$Ve1=[14,17,20,33,41,47,48,49,55,57,58,59,60,61,62,66,68,69,76,77,78,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"import":4,"instrucciones_cuerpo":5,"EOF":6,"instruccion_c":7,"declaracion":8,"fin":9,"visibilidad":10,"declararfuncion":11,"defest":12,"tipo":13,"IDENTIFICADOR":14,"APAR":15,"params":16,"CPAR":17,"ALLAVE":18,"instrucciones_fun":19,"CLLAVE":20,"RVOID":21,"params2":22,"COMA":23,"instrucciones_f":24,"si":25,"switch":26,"transferencia":27,"cases":28,"asignacion":29,"ciclos":30,"llamadaMetodo":31,"fprint":32,"RDEFINE":33,"RAS":34,"ACORCH":35,"listaest":36,"CCORCH":37,"aest":38,"IGUAL":39,"exp":40,"RPRINT":41,"lista_params":42,"lista_params2":43,"param":44,"sparam":45,"DOLAR":46,"RWHILE":47,"RDO":48,"RFOR":49,"ifor":50,"PCOMA":51,"mfor":52,"ffor":53,"inc_dec":54,"RCASE":55,"DOSPTS":56,"RDEFAULT":57,"RBREAK":58,"RCONTINUE":59,"RRETURN":60,"RSWITCH":61,"RIF":62,"RELSE":63,"listaID":64,"pvalor":65,"RVAR":66,"DOSPUNTOSIGUAL":67,"RCONST":68,"RGLOBAL":69,"valarray":70,"RSTRC":71,"tp":72,"arrvalue":73,"listavarr":74,"elemarr":75,"RINTEGER":76,"RDOUBLE":77,"RCHAR":78,"RBOOLEAN":79,"RIMPORT":80,"listaimport":81,"ARCHIVO":82,"MENOS":83,"NOT":84,"MAS":85,"POR":86,"DIVIDIDO":87,"MODULO":88,"POTENCIA":89,"XOR":90,"OR":91,"AND":92,"IGUALIGUAL":93,"DIFIGUAL":94,"TRESIGUAL":95,"MAYOR":96,"MENOR":97,"MAYORIGUAL":98,"MENORIGUAL":99,"RFALSE":100,"RTRUE":101,"ENTERO":102,"DECIMAL":103,"CADENA":104,"MASMAS":105,"MENOSMENOS":106,"RPUBLIC":107,"RPRIVATE":108,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",14:"IDENTIFICADOR",15:"APAR",17:"CPAR",18:"ALLAVE",20:"CLLAVE",21:"RVOID",23:"COMA",33:"RDEFINE",34:"RAS",35:"ACORCH",37:"CCORCH",39:"IGUAL",41:"RPRINT",46:"DOLAR",47:"RWHILE",48:"RDO",49:"RFOR",51:"PCOMA",55:"RCASE",56:"DOSPTS",57:"RDEFAULT",58:"RBREAK",59:"RCONTINUE",60:"RRETURN",61:"RSWITCH",62:"RIF",63:"RELSE",66:"RVAR",67:"DOSPUNTOSIGUAL",68:"RCONST",69:"RGLOBAL",71:"RSTRC",76:"RINTEGER",77:"RDOUBLE",78:"RCHAR",79:"RBOOLEAN",80:"RIMPORT",82:"ARCHIVO",83:"MENOS",84:"NOT",85:"MAS",86:"POR",87:"DIVIDIDO",88:"MODULO",89:"POTENCIA",90:"XOR",91:"OR",92:"AND",93:"IGUALIGUAL",94:"DIFIGUAL",95:"TRESIGUAL",96:"MAYOR",97:"MENOR",98:"MAYORIGUAL",99:"MENORIGUAL",100:"RFALSE",101:"RTRUE",102:"ENTERO",103:"DECIMAL",104:"CADENA",105:"MASMAS",106:"MENOSMENOS",107:"RPUBLIC",108:"RPRIVATE"},
productions_: [0,[3,3],[3,2],[5,2],[5,0],[7,2],[7,2],[7,1],[7,1],[11,8],[11,8],[16,1],[16,0],[22,4],[22,2],[19,2],[19,0],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[12,7],[36,3],[36,1],[38,2],[38,4],[32,4],[31,3],[42,1],[42,2],[43,1],[43,3],[44,1],[44,3],[45,1],[45,2],[29,4],[30,7],[30,9],[30,11],[50,1],[50,0],[52,1],[52,0],[53,1],[53,1],[53,0],[28,3],[28,2],[27,2],[27,2],[27,2],[27,3],[26,7],[25,7],[25,11],[25,9],[8,4],[8,4],[8,4],[8,4],[8,2],[65,1],[70,5],[70,1],[73,3],[74,3],[74,1],[75,1],[75,1],[13,1],[13,3],[72,1],[72,1],[72,1],[72,1],[72,1],[64,3],[64,1],[4,3],[81,3],[81,1],[40,2],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,4],[40,4],[54,2],[54,2],[10,1],[10,1],[9,1],[9,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var arr = [];
		// cuado se haya reconocido la entrada completa retornamos el AST
		if($$[$0-2] != null){
			arr.push($$[$0-2]);
		}
		arr.push($$[$0-1]);
		return arr; 
	
break;
case 2:

		var arr = []; 
		arr.push($$[$0-1]); 
		return arr;
	
break;
case 3:
  $$[$0-1].hijos.push($$[$0]); this.$ = $$[$0-1];  
break;
case 4: case 16:
this.$ = new Instrucciones(this._$.first_line,this._$.first_column); 
break;
case 5: case 85: case 106:
 this.$ = $$[$0-1]; 
break;
case 6: case 7:
 this.$ = $$[$0]; 
break;
case 8: case 18: case 19: case 20: case 21: case 22: case 23: case 35: case 68: case 75: case 114:
this.$ = $$[$0]; 
break;
case 9:

					this.$ = new decfunc(this._$.first_line,this._$.first_column);
					this.$.tipo = $$[$0-7];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 10:

					this.$ = new decfunc(this._$.first_line,this._$.first_column);
					this.$.tipo = [vtipo.void];
					this.$.id = $$[$0-6]; 
					this.$.hijos = $$[$0-4];
					this.$.inst = $$[$0-1]; 
				
break;
case 11: case 46: case 48: case 50: case 51: case 113:
this.$ = $$[$0];
break;
case 12:
this.$ = [];
break;
case 13:
 
				this.$ = $$[$0-3]; var n = new Param(this._$.first_line,this._$.first_column);
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n); 	
			 
break;
case 14:
 
				this.$ = []; var n  = new Param(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-1]; n.id = $$[$0]; this.$.push(n);
	   	
break;
case 15:
$$[$0-1].hijos.push($$[$0]); this.$ = $$[$0-1];      
break;
case 17: case 25:
this.$ = $$[$0-1]; 
break;
case 24: case 26:
this.$ = $$[$0]
break;
case 27:

		this.$ = new estructura(this._$.first_line,this._$.first_column);
		this.$.hijos= ($$[$0-2]); 
		this.$.id = $$[$0-5]; 
	
break;
case 28: case 37:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 29:
 this.$ = [$$[$0]];  
break;
case 30:
 this.$ = new atributoEst(this._$.first_line,this._$.first_column); this.$.id = $$[$0]; this.$.tipo = $$[$0-1];  
break;
case 31:

			this.$ = new atributoEst(this._$.first_line,this._$.first_column); this.$.id = $$[$0-2]; this.$.tipo = $$[$0-3]; this.$.hijos.push($$[$0]); 
		 
break;
case 32:
 this.$ = new Print(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0-1]);    
break;
case 33:
this.$ = new llamadaFunc(this._$.first_line,this._$.first_column);
						this.$.hijos = $$[$0-1]; this.$.id = $$[$0-2];  
break;
case 34:
 this.$ = [];  
break;
case 36:
this.$ = [$$[$0]]; 
break;
case 38:
this.$ = $$[$0]; this.$.id = null; 
break;
case 39:
this.$ = $$[$0];
		var n = new Id(this._$.first_line,this._$.first_column);
		n.id = $$[$0-2]; 
		this.$.hijos.unshift(n);
	 
break;
case 40:
 this.$ = new SParam(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0]); this.$.ref = false;  
break;
case 41:
this.$ = new SParam(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0]); this.$.ref = true; 
break;
case 42:

		this.$ = new Asignacion(this._$.first_line,this._$.first_column);
		var n = new Id(this._$.first_line,this._$.first_column);
		n.id = $$[$0-3]; 
		this.$.hijos.push(n) ; 
		this.$.hijos.push($$[$0-1]); 
		 
break;
case 43:

			this.$ = new While(this._$.first_line,this._$.first_column);
			this.$.hijos.push($$[$0-4]); 
			this.$.hijos.push($$[$0-1]); 
		
break;
case 44:

			this.$ = new do_while(this._$.first_line,this._$.first_column);
			this.$.hijos = [$$[$0-6], $$[$0-2]]; 

		
break;
case 45:

			this.$ = new For(this._$.first_line,this._$.first_column);
			this.$.hijos = [$$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]]; 
		
break;
case 47: case 49: case 52:
this.$ = null; 
break;
case 53:
this.$ = new Case(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0-1]); 
break;
case 54:
 this.$ = new Default(this._$.first_line,this._$.first_column); 
break;
case 55:
 this.$ = new Break(this._$.first_line,this._$.first_column); 
break;
case 56:
 this.$ = new Continue(this._$.first_line,this._$.first_column);  
break;
case 57:
 this.$ = new Return(this._$.first_line,this._$.first_column);   
break;
case 58:
this.$ = new Return(this._$.first_line,this._$.first_column); this.$.hijos.push($$[$0-1]);  
break;
case 59:

	this.$ = new Switch(this._$.first_line,this._$.first_column);
	this.$.hijos.push($$[$0-4]);
	this.$.hijos.push($$[$0-1]); 

break;
case 60:

		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-4]); 
		this.$.hijos.push($$[$0-1]); 
	
break;
case 61:

		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-8]); 
		this.$.hijos.push($$[$0-5]);
		this.$.hijos.push($$[$0-1]);
	
break;
case 62:

		
		this.$ = new If(this._$.first_line,this._$.first_column); 
		this.$.hijos.push($$[$0-6]); 
		this.$.hijos.push($$[$0-3]);
		this.$.hijos.push($$[$0]);
	
break;
case 63:

				var n = new Declaracion(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-3]; 
				n.hijos.push($$[$0-2]);
				n.hijos.push($$[$0]);
				this.$ = n; 
			
break;
case 64:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.var; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 65:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.const; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 66:

				this.$ = new Dect2_4(this._$.first_line,this._$.first_column); 
				this.$.tipo = vddi.global; 
				this.$.id = $$[$0-2]; 
				this.$.hijos.push($$[$0]);
			
break;
case 67:

				var n = new Declaracion(this._$.first_line,this._$.first_column); 
				n.tipo = $$[$0-1]; 
				n.hijos.push($$[$0]);

				this.$ = n; 
			
break;
case 69:
this.$ = null;
break;
case 76:
this.$ = [$$[$0]];
break;
case 77:
this.$ = [$$[$0-2], 0]; 
break;
case 78:
 this.$ = vtipo.integer; 	
break;
case 79:
 this.$ = vtipo.double;	
break;
case 80:
 this.$ = vtipo.char; 		
break;
case 81:
 this.$ = vtipo.boolean;	
break;
case 82:
 this.$ = $$[$0];				
break;
case 83:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2]; 
break;
case 84:
 
			var n = new  ListaId(this._$.first_line,this._$.first_column);
			n.hijos.push($$[$0]); 
			this.$ = n; 
		
break;
case 86:
 $$[$0-2].hijos.push($$[$0]); this.$ = $$[$0-2];
break;
case 87:
 var  n = new Importar(this._$.first_line,this._$.first_column); n.hijos.push($$[$0]); this.$ = n;   
break;
case 88:
this.$ = new expresionUnaria(this._$.first_line,this._$.first_column); 
								this.$.operando = voperando.menos; this.$.hijos.push($$[$0]);  
break;
case 89:
this.$ = new expresionUnaria(this._$.first_line,this._$.first_column);
								 this.$.operando = voperando.not;   this.$.hijos.push($$[$0]);  
break;
case 90:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mas; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]); 
break;
case 91:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menos; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 92:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.por; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 93:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.dividido; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 94:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.modulo; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 95:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.potencia; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 96:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.xor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 97:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.or; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 98:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.and; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 99:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.igualigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 100:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.difigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 101:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.trigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 102:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mayor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 103:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menor; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 104:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.mayorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 105:
this.$ = new expresion_binaria(this._$.first_line,this._$.first_column); this.$.operando = voperando.menorigual; this.$.hijos.push($$[$0-2]); this.$.hijos.push($$[$0]);  
break;
case 107:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.boolean; this.$.valor = false; 		
break;
case 108:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.boolean; this.$.valor = true; 		
break;
case 109:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.integer; this.$.valor = Number($$[$0]); 	
break;
case 110:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.double; this.$.valor = Number($$[$0]);  	
break;
case 111:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.string; this.$.valor = $$[$0];  			
break;
case 112:
 this.$ = new primitivo(this._$.first_line,this._$.first_column); this.$.tipo = vprim.id; this.$.valor = $$[$0]; 
break;
case 115:
 this.$ = new Casteo(this._$.first_line,this._$.first_column); this.$.tipo = vtipo.integer; this.$.hijos.push($$[$0]);   
break;
case 116:
 this.$ = new Casteo(this._$.first_line,this._$.first_column); this.$.tipo = vtipo.char; this.$.hijos.push($$[$0]);
break;
case 117:
 this.$ = new inc_dec(this._$.first_line,this._$.first_column); this.$.operando = voperando.masmas; this.$.id = $$[$0-1]; 
break;
case 118:
 this.$ = new inc_dec(this._$.first_line,this._$.first_column); this.$.operando = voperando.menosmenos; this.$.id = $$[$0-1]; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3,80:[1,4]}),{1:[3]},o($V0,$V1,{5:5}),{6:[1,6],7:7,8:8,10:9,11:10,12:11,13:12,14:$V2,21:$V3,33:$V4,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb,107:$Vc,108:$Vd},{81:26,82:[1,27]},{6:[1,28],7:7,8:8,10:9,11:10,12:11,13:12,14:$V2,21:$V3,33:$V4,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb,107:$Vc,108:$Vd},{1:[2,2]},o($V0,[2,3]),o($V0,$Ve,{9:29,51:$Vf}),{11:31,13:32,14:$V2,21:$V3,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($V0,[2,7]),o($V0,[2,8]),{14:[1,34],64:33},{14:[1,35]},{14:[1,36]},{14:[1,37]},o($Vg,[2,119]),o($Vg,[2,120]),{14:[1,38]},{14:[1,39]},{14:[2,76],35:[1,40]},o($Vh,[2,78]),o($Vh,[2,79]),o($Vh,[2,80]),o($Vh,[2,81]),o($Vh,$Vi),o($V0,$Ve,{9:41,23:[1,42],51:$Vf}),o($Vj,[2,87]),{1:[2,1]},o($V0,[2,5]),o([6,14,17,20,21,33,41,47,48,49,55,57,58,59,60,61,62,66,68,69,76,77,78,79,107,108],[2,121]),o($V0,[2,6]),{14:[1,43]},o($Vk,[2,67],{23:[1,45],39:[1,44]}),o([6,14,21,23,33,39,51,66,68,69,76,77,78,79,107,108],$Vl,{15:$Vm}),{67:[1,47]},{67:[1,48]},{67:[1,49]},{15:[1,50]},{34:[1,51]},{37:[1,52]},o($V0,[2,85]),{82:[1,53]},{15:$Vm},{14:$Vn,15:$Vo,31:66,40:55,54:65,65:54,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:[1,67]},{13:70,14:$V2,16:68,17:$Vw,22:69,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{14:$Vn,15:$Vo,31:66,40:55,54:65,65:71,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:55,54:65,65:72,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:55,54:65,65:73,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{13:70,14:$V2,16:74,17:$Vw,22:69,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{35:[1,75]},{14:[2,77]},o($Vj,[2,86]),o($Vk,[2,63]),o($Vk,[2,68],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),{14:$Vn,15:$Vo,31:66,40:92,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:93,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:94,54:65,76:[1,95],78:[1,96],83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,111]),o($VN,$VO,{42:99,15:$VP,105:$VQ,106:$VR}),o($VN,[2,113]),o($VN,[2,114]),o([6,14,20,21,23,33,39,41,47,48,49,51,55,57,58,59,60,61,62,66,68,69,76,77,78,79,107,108],[2,83]),{17:[1,101]},{17:[2,11],23:[1,102]},{14:[1,103]},o($Vk,[2,64]),o($Vk,[2,65]),o($Vk,[2,66]),{17:[1,104]},{13:107,14:$V2,36:105,38:106,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{14:$Vn,15:$Vo,31:66,40:108,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:109,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:110,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:111,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:112,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:113,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:114,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:115,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:116,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:117,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:118,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:119,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:120,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:121,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:122,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:123,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VN,[2,88]),o($VN,[2,89]),{17:[1,124],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{17:[1,125]},{17:[1,126]},o($VN,[2,117]),o($VN,[2,118]),{17:[1,127]},{14:$VS,15:$Vo,17:[2,34],31:66,40:132,43:128,44:129,45:130,46:$VT,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{18:[1,134]},{13:135,14:$V2,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($VU,[2,14]),{18:[1,136]},{23:[1,138],37:[1,137]},o($VV,[2,29]),{14:[1,139]},o($VW,[2,90],{86:$Vz,87:$VA,88:$VB,89:$VC}),o($VW,[2,91],{86:$Vz,87:$VA,88:$VB,89:$VC}),o($VX,[2,92],{89:$VC}),o($VX,[2,93],{89:$VC}),o($VX,[2,94],{89:$VC}),o($VN,[2,95]),o([6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,90,107,108],[2,96],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),o([6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,90,91,107,108],[2,97],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),o([6,14,17,20,21,23,33,37,41,47,48,49,51,55,56,57,58,59,60,61,62,66,68,69,76,77,78,79,90,91,92,107,108],[2,98],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),o($VY,[2,99],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,96:$VJ,97:$VK,98:$VL,99:$VM}),o($VY,[2,100],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,96:$VJ,97:$VK,98:$VL,99:$VM}),o($VY,[2,101],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,96:$VJ,97:$VK,98:$VL,99:$VM}),o($VZ,[2,102],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($VZ,[2,103],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($VZ,[2,104],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($VZ,[2,105],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC}),o($VN,[2,106]),{14:$Vn,15:$Vo,31:66,40:140,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:141,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VN,[2,33]),{17:[2,35],23:[1,142]},o($VU,[2,36]),o($VU,[2,38]),o([17,23,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],$VO,{42:99,15:$VP,39:[1,143],105:$VQ,106:$VR}),o($VU,[2,40],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),{14:$Vn,15:$Vo,31:66,40:144,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($V_,$V$,{19:145}),{14:[1,146]},o($V_,$V$,{19:147}),o($V01,$Ve,{9:148,51:$Vf}),{13:107,14:$V2,38:149,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($VV,[2,30],{39:[1,150]}),o($VN,[2,115]),o($VN,[2,116]),{14:$VS,15:$Vo,31:66,40:132,44:151,45:130,46:$VT,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:132,45:152,46:$VT,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VU,[2,41],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),{8:155,12:156,13:165,14:$V11,20:[1,153],24:154,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($VU,[2,13]),{8:155,12:156,13:165,14:$V11,20:[1,178],24:154,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($V01,[2,27]),o($VV,[2,28]),{14:$Vn,15:$Vo,31:66,40:179,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($VU,[2,37]),o($VU,[2,39]),o($V0,[2,9]),o($V_,[2,15]),o($V_,$Ve,{9:180,51:$Vf}),o($V_,[2,18]),o($V_,[2,19]),o($V_,[2,20]),o($V_,[2,21]),o($V_,[2,22]),o($V_,[2,23]),o($V_,[2,24]),o($V_,$Ve,{9:181,51:$Vf}),o($V_,[2,26]),{14:[1,182],64:33},{15:[1,183]},{15:[1,184]},o($V_,$Ve,{9:185,51:$Vf}),o($V_,$Ve,{9:186,51:$Vf}),{14:$Vn,15:$Vo,31:66,40:188,51:[1,187],54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:189,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{56:[1,190]},o($Vh,$Vi,{42:99,15:$VP,39:$Vd1}),{15:[1,192]},{18:[1,193]},{15:[1,194]},{15:[1,195]},o($V0,[2,10]),o($VV,[2,31],{83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),o($V_,[2,17]),o($V_,[2,25]),o([14,20,23,33,39,41,47,48,49,51,55,57,58,59,60,61,62,66,68,69,76,77,78,79],$Vl),{14:$Vn,15:$Vo,31:66,40:196,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:197,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($V_,[2,55]),o($V_,[2,56]),o($V_,[2,57]),{51:[1,198],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{56:[1,199],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},o($V_,[2,54]),{14:$Vn,15:$Vo,31:66,40:200,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:$Vn,15:$Vo,31:66,40:201,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{8:155,12:156,13:165,14:$V11,24:202,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{8:204,13:165,14:$V2,50:203,51:[2,47],66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{14:$Vn,15:$Vo,31:66,40:205,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{17:[1,206],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{17:[1,207],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},o($V_,[2,58]),o($V_,[2,53]),o($Ve1,$Ve,{9:208,51:$Vf,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM}),{17:[1,209],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{20:[1,210]},{51:[1,211]},{51:[2,46]},{17:[1,212],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{18:[1,213]},{18:[1,214]},o($Ve1,[2,42]),{18:[1,215]},{47:[1,216]},{14:$Vn,15:$Vo,31:66,40:218,51:[2,49],52:217,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},o($V_,[2,32]),{8:155,12:156,13:165,14:$V11,24:219,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{8:155,12:156,13:165,14:$V11,24:220,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{8:155,12:156,13:165,14:$V11,24:221,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{15:[1,222]},{51:[1,223]},{51:[2,48],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{20:[1,224]},{20:[1,225]},{20:[1,226]},{14:$Vn,15:$Vo,31:66,40:227,54:65,83:$Vp,84:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv},{14:[1,231],17:[2,52],29:229,53:228,54:230},o($V_,[2,60],{63:[1,232]}),o($V_,[2,59]),o($V_,[2,43]),{17:[1,233],83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM},{17:[1,234]},{17:[2,50]},{17:[2,51]},{39:$Vd1,105:$VQ,106:$VR},{18:[1,235],25:236,62:$Vc1},o($V_,$Ve,{9:237,51:$Vf}),{18:[1,238]},{8:155,12:156,13:165,14:$V11,24:239,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},o($V_,[2,62]),o($V_,[2,44]),{8:155,12:156,13:165,14:$V11,24:240,25:157,26:158,27:159,28:160,29:161,30:162,31:163,32:164,33:$V4,41:$V21,47:$V31,48:$V41,49:$V51,55:$V61,57:$V71,58:$V81,59:$V91,60:$Va1,61:$Vb1,62:$Vc1,66:$V5,68:$V6,69:$V7,72:20,76:$V8,77:$V9,78:$Va,79:$Vb},{20:[1,241]},{20:[1,242]},o($V_,[2,61]),o($V_,[2,45])],
defaultActions: {6:[2,2],28:[2,1],52:[2,77],204:[2,46],229:[2,50],230:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'RNULL';
break;
case 4:return 80;
break;
case 5:return 100;
break;
case 6:return 101;
break;
case 7:return 61;
break;
case 8:return 59;
break;
case 9:return 108;
break;
case 10:return 33;
break;
case 11:return 'RTRY';
break;
case 12:return 76;
break;
case 13:return 66;
break;
case 14:return 55;
break;
case 15:return 60;
break;
case 16:return 21;
break;
case 17:return 34;
break;
case 18:return 'RCATCH';
break;
case 19:return 77;
break;
case 20:return 68;
break;
case 21:return 62;
break;
case 22:return 57;
break;
case 23:return 41;
break;
case 24:return 49;
break;
case 25:return 71;
break;
case 26:return 'RTHROW';
break;
case 27:return 78;
break;
case 28:return 69;
break;
case 29:return 63;
break;
case 30:return 58;
break;
case 31:return 107;
break;
case 32:return 47;
break;
case 33:return 48; 
break;
case 34:return 79; 
break;
case 35:return "COMA";
break;
case 36:return 51;
break;
case 37:return 18;
break;
case 38:return 20;
break;
case 39:return 15;
break;
case 40:return 17;
break;
case 41:return "ACORCH";
break;
case 42:return "CCORCH";
break;
case 43:return 92
break;
case 44:return 91;
break;
case 45:return 46;
break;
case 46:return 105;
break;
case 47:return 106;
break;
case 48:return 85;
break;
case 49:return 83;
break;
case 50:return 86;
break;
case 51:return 87;
break;
case 52:return "POTENCIA";
break;
case 53:return "MODULO";  
break;
case 54:return "DOSPUNTOSIGUAL";
break;
case 55:return 99;
break;
case 56:return 98;
break;
case 57:return 95;
break;
case 58:return 93;
break;
case 59:return 94;
break;
case 60:return 97;
break;
case 61:return 96;
break;
case 62:return 39;
break;
case 63:return 90;
break;
case 64:return 84;
break;
case 65:return 56;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 104; 
break;
case 67:return 103;
break;
case 68:return 102;
break;
case 69:return "ARCHIVO";
break;
case 70:return 14;
break;
case 71:return 6;
break;
case 72: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:import\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\$)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?::=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9_.-])+(.j))/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}