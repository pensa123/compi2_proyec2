var t1,t2,t3;
var Stack[];
var Heap[];
var P = 0;
var H = 0;
var E = 0;


#Regla 2 
goto L1; 
	t1 = 2; 
	t2 = 3; 
	t3 = 4;
	t5 = 5; 
	if(t1 == 2)goto L2;
L1:
#Esto no lo optimiza por que hay una etiqueta. 
t1 = 3;
goto L2; 
	t1 = 2; 
	t2 = 3; 
    L3:
	t3 = 4;
	t5 = 5; 
	if(t1 == 2)goto L2;
L2:
# regla 4  if( true) goto L1 -> goto L1; 
if( 2 == 2) goto L1; 
# esta no la cambia por que no sabe si es true o false
if ( t1 == 2) goto L1;  
# regla 5  if( false ) goto Lalgo -> se elimina 
if(  2 == 3) goto L1;  
# esta no lo elimina por que no sabe que valor tiene t1
if(  t1 > 3 ) goto L1; 
# regla 6 
goto L4;  #cambiara a goto L5
	t1 = 2; 
	L10:  #esto es para que no lo optimize y elimine dese el goto L4 hasta L4 :D
# regla 7 
if (t1 == 2) goto L4; #este tambien cambiara a L5

# regla 8 
t1 = t1 + 0;  # se elimina 
t1 = 0 + t1;  
# regla 9 
t1 = t1 - 0;  # se elimina 
# regla 10 
t1 = t1 * 1;  # se elimina 
t1 = 1 * t1; 
# regla 11 
t1 = t1 / 1;  # se elimina 
# regla 12 
t1 = t2 + 0;  # res = t1 = t2; 
t1 = 0 + t2;
# regla 13 
t1 = t2 - 0;   # res = t1 = t2; 
# regla 14 
t1 = t2 * 1;   # res = t1 = t2; 
t1 = 1 * t2; 
# regla 15
t1 = t2 / 1;   # res = t1 = t2;
# regla 16
t1 = t2 * 2;   # res = t2 + t2; 
t1 = 2 * t2; 
# regla 17 
t1 = t2 * 0;   # res = t1 = 0; 
t1 = 0 * t2; 
# regla 18 
t1 = 0 / t2;   # res = t1 = 0; 

L4: 
goto L5; 